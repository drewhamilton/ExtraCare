import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    // Shared gradle.properties
    Properties properties = new Properties()
    file("../gradle.properties").withInputStream { properties.load(it) }
    properties.each { key, val ->
        ext.set(key, val)
    }

    repositories {
        mavenCentral()
        google()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "$publish_group:$publish_gradle_plugin_artifact"

        boolean useCompose = Boolean.parseBoolean(project.property("use_compose").toString())
        if (useCompose) {
            classpath 'com.android.tools.build:gradle:7.0.0-alpha12'
        }
    }
}

boolean useCompose = Boolean.parseBoolean(project.property("use_compose").toString())
if (useCompose) {
    apply plugin: 'com.android.library'
    apply plugin: 'org.jetbrains.kotlin.android'
} else {
    apply plugin: 'org.jetbrains.kotlin.jvm'
}
apply plugin: 'dev.drewhamilton.poko'

poko {
    pokoAnnotation.set 'dev.drewhamilton.poko.sample.Poko'
    enabled.set true
}

String resolvedJvmTarget = System.getenv().getOrDefault('ci_java_version', JavaVersion.VERSION_1_8.toString())
if (useCompose) {
    android {
        compileSdkVersion 30
        buildToolsVersion '30.0.3'

        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 30
        }

        compileOptions {
            sourceCompatibility resolvedJvmTarget
            targetCompatibility resolvedJvmTarget
        }

        kotlinOptions {
            jvmTarget = resolvedJvmTarget
            freeCompilerArgs += ['-progressive']
        }

        buildFeatures {
            compose true

            // Disable unused AGP features
            buildConfig false
            aidl false
            renderScript false
            resValues false
            shaders false
        }

        composeOptions {
            kotlinCompilerExtensionVersion compose_version
        }
    }
} else {
    boolean useIr = Boolean.parseBoolean(project.property("use_ir").toString())
    logger.lifecycle "$project: useIR = $useIr"
    project.tasks.withType(KotlinCompile.class).configureEach {
        kotlinOptions {
            jvmTarget = resolvedJvmTarget
            freeCompilerArgs += ['-progressive']
            useIR = useIr
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    if (useCompose) {
        implementation "androidx.compose.runtime:runtime:$compose_version"
    }

    testImplementation 'junit:junit:4.13.1'
    testImplementation 'com.google.truth:truth:1.1'
}

repositories {
    mavenCentral()
    if (useCompose) {
        google()
        jcenter()
    }
}

import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    // Shared gradle.properties
    Properties properties = new Properties()
    file("../gradle.properties").withInputStream { properties.load(it) }
    properties.each { key, val ->
        ext.set(key, val)
    }

    repositories {
        mavenCentral()
        google()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "$publish_group:$publish_gradle_plugin_artifact"
        classpath 'com.android.tools.build:gradle:7.0.0-alpha12'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'dev.drewhamilton.poko'

poko {
    pokoAnnotation.set 'dev.drewhamilton.poko.sample.Poko'
    enabled.set true
}

String resolvedJvmTarget = System.getenv().getOrDefault('ci_java_version', JavaVersion.VERSION_1_8.toString())
android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
    }

    compileOptions {
        sourceCompatibility resolvedJvmTarget
        targetCompatibility resolvedJvmTarget
    }

    kotlinOptions {
        jvmTarget = resolvedJvmTarget
        freeCompilerArgs += ['-progressive']
    }

    buildFeatures {
        compose true

        // Disable unused AGP features
        buildConfig false
        aidl false
        renderScript false
        resValues false
        shaders false
    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.compose.runtime:runtime:$compose_version"

    testImplementation 'junit:junit:4.13.1'
    testImplementation 'com.google.truth:truth:1.1'
}

repositories {
    mavenCentral()
    google()
    jcenter()
}

boolean useIr = Boolean.parseBoolean(project.property("use_ir").toString())
logger.lifecycle "$project: useIR = $useIr"
tasks.withType(KotlinCompile.class).configureEach {
    kotlinOptions {
        useIR = useIr
    }
}

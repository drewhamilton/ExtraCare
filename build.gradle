import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

group publish_group
version publish_version

buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }

        // TODO: Remove Bintray dependencies when possible
        maven { url 'https://dl.bintray.com/kotlin/dokka' }
        maven { url 'https://dl.bintray.com/jetbrains/markdown' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.jetbrains.kotlinx:binary-compatibility-validator:$binary_compatibility_validator_version"

        // Gradle plugin applied to :sample from Maven rather than locally:
        String publishedGradlePluginVersion = publish_version
        if (!publishedGradlePluginVersion.endsWith('-SNAPSHOT'))
            publishedGradlePluginVersion += '-SNAPSHOT'
        // TODO: Switch to Poko
        classpath("dev.drewhamilton.extracare:extracare-gradle-plugin:$publishedGradlePluginVersion") {
            changing = true
        }
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

apply plugin: 'binary-compatibility-validator'
apiValidation {
    ignoredProjects += ['sample']
}

String resolvedJvmTarget = System.getenv().getOrDefault('ci_java_version', JavaVersion.VERSION_1_8.toString())
allprojects {
    repositories {
        mavenCentral()
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }

        // TODO: Remove Bintray dependencies when possible
        maven { url 'https://dl.bintray.com/jetbrains/markdown' }
        maven { url 'https://dl.bintray.com/korlibs/korlibs' }
        maven { url 'https://dl.bintray.com/kotlin/dokka' }
        maven { url 'https://dl.bintray.com/kotlin/kotlinx' }
    }

    pluginManager.withPlugin("org.jetbrains.kotlin.jvm") {
        project.tasks.withType(KotlinCompile.class).configureEach {
            kotlinOptions {
                jvmTarget = resolvedJvmTarget
                freeCompilerArgs += ['-progressive']
            }
        }
    }
}

subprojects {
    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module(
                    "$publish_group:$publish_compiler_plugin_artifact"
                ) with project(':poko-compiler-plugin')

                substitute module(
                    "$publish_group:$publish_annotations_artifact"
                ) with project(':poko-annotations')
            }
        }
    }
}
